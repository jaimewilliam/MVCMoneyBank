@model MVCMoneyBank.Models.AccountList

@{
    ViewBag.Title = "Edit";

    int accountId = 0;
    string accountNo = "";
    string customerName = "";
    string mobileNo = "";
    decimal? amount = 0;
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    if (Model !=null)
    {
        accountId = Model.AccountId;
        accountNo = Model.AccountNo;
        customerName = Model.CustomerName;
        mobileNo = Model.MobileNumber;
        amount = Model.Amount;
    }

    <div class="form-horizontal">
        @*<h4>AccountList</h4>*@
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group" style="display:none">
            @Html.LabelFor(model => model.AccountId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AccountId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AccountId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AccountNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AccountNo, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.AccountNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
            </div>
        </div>

        @if(Model != null && Model?.MobileNumbers?.Count > 0)
        {
            <div class="form-group divnum">
            @*@foreach (var item in Model)*@
                @for (int i = 0; i < Model.MobileNumbers.Count; i++)
                {
                    <div class="form-group clonenumber">
                        
                        @Html.TextBoxFor(modelItem => modelItem.MobileNumbers[i].MobileNumberID, new { @class = "form-control number numId", @style = "display:block;" })
                        @Html.LabelFor(modelItem => modelItem.MobileNumbers[i].MobileNumber1, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(modelItem => modelItem.MobileNumbers[i].MobileNumber1, new { htmlAttributes = new { @class = "form-control mobileinput", onblur = "Focusout(this);", onchange = "OnChangeEvent(this)", onkeyup = "countInput(this);" } })
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="form-group divnum">
                <div class="clonenumber">
                    @Html.LabelFor(model => model.MobileNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.MobileNumber, new { htmlAttributes = new { @class = "form-control noval", onblur = "Focusout(this);", onchange = "OnChangeEvent(this)", onkeyup = "onkeyUP(this);" } })
                        @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                </div>
            </div>
        }

            <input style="display:block" id="extranum" type="text" name="additionalnumbers" value="" />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Cancel" class="btn btn-primary" onclick="cancel(this);return false" />
                <input type="submit" value="Save" class="btn btn-success" />
            </div>
        </div>
    </div>
}

@*<div>
        @Html.ActionLink("Back to List", "List")
    </div>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@Scripts.Render("~/bundles/jquery")

<script>
    function cancel(btncancel) {
        window.location.href = '/Home/List';
    }

    //**Add a class on keyup to check if input val == 0!
    function onkeyUP(mblinput) {
        if ($(mblinput).val().length === 0) {
            $(mblinput).addClass('noval');
        }
        else {
            $(mblinput).removeClass('noval');
        }
    }

    function Focusout(mblnum) {
        if ($('.noval').length === 0 ) {
            var num = $(".clonenumber");
            var newnum = $(num[0]).clone();
            $(newnum).find('.mobileinput').addClass('noval');
            $(newnum).appendTo(".divnum").find('input').val('');
            $(newnum).find('input').addClass('noval');
        }
    }

    function OnChangeEvent(getnum) {

        var xnum = null;
        var oldValue = null;
        var arr = null;
        var newValue = null;

        if ($(getnum).parent().parent().find('.numId').val() === '') {

            xnum = $(getnum).val();
            //***jQuery push multiple values in input tag
            oldValue = $("#extranum").val();
            arr = oldValue === "" ? [] : oldValue.split(',');
            arr.push(xnum);
            newValue = arr.join(',');
            jQuery('#extranum').val(newValue);

        } else {

            xnum = $(getnum).val();
            //***jQuery push multiple values in input tag
            oldValue = $("#extranum").val();
            arr = oldValue === "" ? [] : oldValue.split(',');
            arr.push(xnum);
            newValue = arr.join(',');
            jQuery('#extranum').val(newValue);
        }

        
    }


    //*** jQuery.on() delegated mouseenter and mouseleave[duplicate]
    //$("#MobileNumber").on({
    //    mouseenter: function () {
    //        //stuff
    //    },
    //    mouseleave: function () {

    //    }
    //}, '.foo');
    
</script>
